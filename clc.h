/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CLC_H_RPCGEN
#define _CLC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct suma_1_argument {
	int arg1;
	int arg2;
};
typedef struct suma_1_argument suma_1_argument;

struct resta_1_argument {
	int arg1;
	int arg2;
};
typedef struct resta_1_argument resta_1_argument;

struct multiplicacion_1_argument {
	int arg1;
	int arg2;
};
typedef struct multiplicacion_1_argument multiplicacion_1_argument;

struct division_1_argument {
	int arg1;
	int arg2;
};
typedef struct division_1_argument division_1_argument;

#define CLC_PROG 0x31111111
#define CLC_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define INICIALIZA_RANDOM 1
extern  void * inicializa_random_1(int , CLIENT *);
extern  void * inicializa_random_1_svc(int , struct svc_req *);
#define OBTIENE_1ER_RANDOM 2
extern  int * obtiene_1er_random_1(CLIENT *);
extern  int * obtiene_1er_random_1_svc(struct svc_req *);
#define OBTIENE_2DO_RANDOM 3
extern  int * obtiene_2do_random_1(CLIENT *);
extern  int * obtiene_2do_random_1_svc(struct svc_req *);
#define SUMA 4
extern  int * suma_1(int , int , CLIENT *);
extern  int * suma_1_svc(int , int , struct svc_req *);
#define RESTA 5
extern  int * resta_1(int , int , CLIENT *);
extern  int * resta_1_svc(int , int , struct svc_req *);
#define MULTIPLICACION 6
extern  int * multiplicacion_1(int , int , CLIENT *);
extern  int * multiplicacion_1_svc(int , int , struct svc_req *);
#define DIVISION 7
extern  int * division_1(int , int , CLIENT *);
extern  int * division_1_svc(int , int , struct svc_req *);
extern int clc_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define INICIALIZA_RANDOM 1
extern  void * inicializa_random_1();
extern  void * inicializa_random_1_svc();
#define OBTIENE_1ER_RANDOM 2
extern  int * obtiene_1er_random_1();
extern  int * obtiene_1er_random_1_svc();
#define OBTIENE_2DO_RANDOM 3
extern  int * obtiene_2do_random_1();
extern  int * obtiene_2do_random_1_svc();
#define SUMA 4
extern  int * suma_1();
extern  int * suma_1_svc();
#define RESTA 5
extern  int * resta_1();
extern  int * resta_1_svc();
#define MULTIPLICACION 6
extern  int * multiplicacion_1();
extern  int * multiplicacion_1_svc();
#define DIVISION 7
extern  int * division_1();
extern  int * division_1_svc();
extern int clc_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_suma_1_argument (XDR *, suma_1_argument*);
extern  bool_t xdr_resta_1_argument (XDR *, resta_1_argument*);
extern  bool_t xdr_multiplicacion_1_argument (XDR *, multiplicacion_1_argument*);
extern  bool_t xdr_division_1_argument (XDR *, division_1_argument*);

#else /* K&R C */
extern bool_t xdr_suma_1_argument ();
extern bool_t xdr_resta_1_argument ();
extern bool_t xdr_multiplicacion_1_argument ();
extern bool_t xdr_division_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CLC_H_RPCGEN */
